// Generated by IcedCoffeeScript 1.8.0-c
(function() {
  var h, validation, _,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  _ = require('lib/underscore');

  h = require('lib/helpers');

  validation = require('lib/validation');

  exports.lists = {
    get_teams: function(header, req) {
      var doc, out, row, team;
      out = [];
      while ((row = getRow())) {
        doc = row.doc;
        if (!validation.is_team(doc)) {
          continue;
        }
        team = h.add_team_perms(doc, req.userCtx);
        out.push(team);
      }
      return JSON.stringify(out);
    }
  };

  exports.shows = {
    get_team: function(doc, req) {
      var team;
      team = h.add_team_perms(doc, req.userCtx);
      return {
        body: JSON.stringify(team),
        "headers": {
          "Content-Type": "application/json"
        }
      };
    }
  };

  exports.validate_doc_update = validation.validate_doc_update;

  exports.updates = {
    do_action: function(team, req) {
      var action, body, container, i, item, key, value;
      if (!team) {
        return [null, '{"status": "error", "msg": "team not found"}'];
      }
      body = JSON.parse(req.body);
      value = body.value;
      action = body.action;
      key = body.key;
      if (action === 'u+') {
        container = h.mk_objs(team.roles, [key, 'members'], []);
        if (__indexOf.call(container, value) >= 0) {
          return [null, JSON.stringify(h.add_team_perms(doc, req.userCtx))];
        } else {
          container.push(value);
        }
      } else if (action === 'u-') {
        container = h.mk_objs(team.roles, [key, 'members'], []);
        if (__indexOf.call(container, value) < 0) {
          return [null, JSON.stringify(h.add_team_perms(doc, req.userCtx))];
        } else {
          i = container.indexOf(value);
          container.splice(i, 1);
        }
      } else if (action === 'a+') {
        container = h.mk_objs(team.rsrcs, [key, 'assets'], []);
        item = _.find(container, function(item) {
          return (item.id && (item.id === value.id || String(item.id) === value.id)) || (item["new"] && item["new"] === value["new"]);
        });
        if (item) {
          return [null, JSON.stringify(h.add_team_perms(doc, req.userCtx))];
        } else {
          container.push(value);
        }
      } else if (action === 'a-') {
        container = h.mk_objs(team.rsrcs, [key, 'assets'], []);
        item = _.find(container, function(item) {
          return item.id === value || String(item.id) === value;
        });
        if (!item) {
          return [null, JSON.stringify(h.add_team_perms(doc, req.userCtx))];
        } else {
          i = container.indexOf(item);
          container.splice(i, 1);
        }
      } else {
        return [null, '{"status": "error", "msg": "invalid action"}'];
      }
      team.audit.push({
        u: req.userCtx.name,
        dt: +new Date(),
        a: action,
        k: key,
        v: value,
        id: body.uuid
      });
      return [team, JSON.stringify(h.add_team_perms(doc, req.userCtx))];
    }
  };

  exports.rewrites = [
    {
      from: "/teams",
      to: "/_list/get_teams/_all_docs",
      method: 'GET',
      query: {
        include_docs: 'true'
      }
    }, {
      from: "/teams/:team_id",
      to: "/_show/get_team/:team_id",
      query: {}
    }
  ];

}).call(this);
