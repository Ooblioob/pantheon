// Generated by IcedCoffeeScript 1.8.0-c
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  exports.views = {
    by_type: {
      map: function(doc) {
        var team_data;
        team_data = require('views/lib/team_data').parse(doc._id);
        if (!team_data) {
          return;
        }
        return emit([team_data.team, team_data.typ, team_data.name], 1);
      }
    }
  };

  exports.lists = {
    get_docs: function(header, req) {
      var out, row;
      out = [];
      while ((row = getRow())) {
        out.push(row.doc);
      }
      return JSON.stringify(out);
    }
  };

  exports.updates = {
    do_action: function(team, req) {
      var action, body, container, i, item, key, value, _;
      _ = require('underscore');
      if (!team) {
        return [null, '{"status": "error", "msg": "team not found"}'];
      }
      body = JSON.parse(req.body);
      action = body.action;
      key = body.key;
      value = body.value;
      if (action !== 'u+' && action !== 'u-' && action !== 'a+' && action !== 'a-') {
        return [null, '{"status": "error", "msg": "invalid action"}'];
      }
      if (action[0] === 'u') {
        if (!team.roles[key]) {
          team.roles[key] = [];
        }
        container = team.roles[key];
        item = value;
      } else {
        if (!team.rsrcs[key]) {
          team.rsrcs[key] = {};
        }
        if (!team.rsrcs[key].assets) {
          team.rsrcs[key].assets = [];
        }
        container = team.rsrcs[key].assets;
        item = _.find(container, function(item) {
          return item.id === value || String(item.id) === value;
        });
      }
      if (action[1] === '+') {
        if (__indexOf.call(container, item) >= 0) {
          return [null, JSON.stringify(team)];
        } else {
          container.push(value);
        }
      } else {
        if (__indexOf.call(container, item) < 0) {
          return [null, JSON.stringify(team)];
        } else {
          i = container.indexOf(item);
          container.splice(i, 1);
        }
      }
      team.audit.push({
        u: req.userCtx.name,
        dt: +new Date(),
        a: action,
        k: key,
        v: value
      });
      return [team, JSON.stringify(team)];
    }
  };

  exports.rewrites = [];

}).call(this);
