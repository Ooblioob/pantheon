// Generated by IcedCoffeeScript 1.8.0-c
(function() {
  var auth, err, v, _;

  try {
    _ = require('underscore');
  } catch (_error) {
    err = _error;
    _ = require('lib/underscore');
  }

  auth = require('./auth/auth');

  v = {};

  v.is_team = function(doc) {
    return doc._id.indexOf('team_') === 0;
  };

  v.is_super_admin = function(user) {
    return user.name === 'admin';
  };

  v.get_new_audit_entries = function(new_doc, old_doc) {
    var new_entries, new_log, old_log;
    new_log = new_doc.audit;
    old_log = old_doc ? old_doc.audit : [];
    new_entries = new_log.slice(old_log.length);
    return new_entries;
  };

  v.validate_audit_entry = function(entry, user, team) {
    var authorized, _ref, _ref1;
    if (entry.u !== user.name) {
      throw {
        forbidden: 'User performing action (' + entry.u + ') does not match logged in user (' + user.username + ').'
      };
    }
    if (entry.a === 't+') {
      authorized = auth.kratos.add_team(user);
    } else if (entry.a === 'u+') {
      authorized = auth.kratos.add_team_member(user, team, entry.k);
    } else if (entry.a === 'u-') {
      authorized = auth.kratos.remove_team_member(user, team, entry.k);
    } else if (entry.a === 'a+') {
      authorized = ((_ref = auth[entry.k]) != null ? _ref.add_team_asset(user, team) : void 0) || false;
    } else if (entry.a === 'a-') {
      authorized = ((_ref1 = auth[entry.k]) != null ? _ref1.remove_team_asset(user, team) : void 0) || false;
    } else {
      throw {
        forbidden: 'Invalid action: ' + entry.a + '.'
      };
    }
    if (!authorized) {
      throw {
        unauthorized: 'You do not have the privileges necessary to perform the action.'
      };
    }
  };

  v.validate_audit_entries = function(new_audit_entries, user, team) {
    return new_audit_entries.forEach(function(entry) {
      return v.validate_audit_entry(entry, user, team);
    });
  };

  v.validate_doc_update = function(new_doc, old_doc, user_ctx, sec_obj) {
    var new_audit_entries;
    if (!v.is_team(new_doc) || v.is_super_admin(user_ctx)) {
      return;
    }
    if (!old_doc) {
      return;
    }
    if (new_doc._deleted) {
      return;
    }
    new_audit_entries = v.get_new_audit_entries(new_doc, old_doc);
    if (!new_audit_entries.length) {
      return;
    }
    return v.validate_audit_entries(new_audit_entries, user_ctx, old_doc);
  };

  module.exports = v;

}).call(this);
